/*
 * GUIMain.java
 *
 * Created on 27. September 2007, 11:14
 */

package de.waldheinz.schmigalla.gui;

import de.waldheinz.schmigalla.CSVReaderAdapter;
import de.waldheinz.schmigalla.CsvWriter;
import de.waldheinz.schmigalla.SchmigallaSolver;
import de.waldheinz.schmigalla.SolverListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author  Matthias Treydte <waldheinz@gmail.com>
 */
public final class GUIMain extends javax.swing.JFrame
        implements SolverListener {
        
    private final static long serialVersionUID = 1;

    private SchmigallaSolver solver;
    private Thread solverThread;
    private long lastStatsUpdate = 0;
    
    
    /** Creates new form GUIMain */
    public GUIMain() {
        initComponents();
        matrixTable.setDefaultRenderer(Object.class, matrixCellRenderer);
        matrixScrollPane.setRowHeader(
              new TableRowHeader(matrixTable, matrixScrollPane));
        this.getRootPane().setDefaultButton(this.startButton);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matrixTableModel = new de.waldheinz.schmigalla.gui.MatrixTableModel();
        matrixCellRenderer = new de.waldheinz.schmigalla.gui.MatrixCellRenderer();
        solutionListModel = new de.waldheinz.schmigalla.gui.SolutionListModel();
        tabPane = new javax.swing.JTabbedPane();
        matrixPanel = new javax.swing.JPanel();
        matrixScrollPane = new javax.swing.JScrollPane();
        matrixTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        solutionsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        solutionList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        boardViewer = new de.waldheinz.schmigalla.gui.BoardViewer();
        progressPanel = new javax.swing.JPanel();
        cacheRatioBar = new javax.swing.JProgressBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        progressBoardViewer = new de.waldheinz.schmigalla.gui.BoardViewer();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cacheUsageLabel = new javax.swing.JLabel();

        matrixCellRenderer.setText("matrixCellRenderer1");

        solutionListModel.addListDataListener(new javax.swing.event.ListDataListener() {
            public void contentsChanged(javax.swing.event.ListDataEvent evt) {
            }
            public void intervalAdded(javax.swing.event.ListDataEvent evt) {
                solutionListModelIntervalAdded(evt);
            }
            public void intervalRemoved(javax.swing.event.ListDataEvent evt) {
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Schmigalla");
        setLocationByPlatform(true);

        matrixPanel.setOpaque(false);

        matrixScrollPane.setBorder(null);

        matrixTable.setModel(matrixTableModel);
        matrixTable.setOpaque(false);
        matrixScrollPane.setViewportView(matrixTable);

        addButton.setText("+");
        addButton.setToolTipText("neue Spalte");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        startButton.setText("los!");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        saveButton.setText("speichern");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("laden");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout matrixPanelLayout = new javax.swing.GroupLayout(matrixPanel);
        matrixPanel.setLayout(matrixPanelLayout);
        matrixPanelLayout.setHorizontalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrixScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                    .addGroup(matrixPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 343, Short.MAX_VALUE)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startButton)))
                .addContainerGap())
        );

        matrixPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {loadButton, saveButton, startButton});

        matrixPanelLayout.setVerticalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, matrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matrixScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(startButton)
                    .addComponent(saveButton)
                    .addComponent(loadButton))
                .addContainerGap())
        );

        tabPane.addTab("Intensitätsmatrix", matrixPanel);

        solutionsPanel.setOpaque(false);

        solutionList.setModel(solutionListModel);
        solutionList.setCellRenderer(new SolutionListCellRenderer());
        solutionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                solutionListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(solutionList);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        boardViewer.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout boardViewerLayout = new javax.swing.GroupLayout(boardViewer);
        boardViewer.setLayout(boardViewerLayout);
        boardViewerLayout.setHorizontalGroup(
            boardViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 127, Short.MAX_VALUE)
        );
        boardViewerLayout.setVerticalGroup(
            boardViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(boardViewer);

        javax.swing.GroupLayout solutionsPanelLayout = new javax.swing.GroupLayout(solutionsPanel);
        solutionsPanel.setLayout(solutionsPanelLayout);
        solutionsPanelLayout.setHorizontalGroup(
            solutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solutionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addContainerGap())
        );
        solutionsPanelLayout.setVerticalGroup(
            solutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, solutionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(solutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabPane.addTab("Lösungen", solutionsPanel);

        progressBoardViewer.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout progressBoardViewerLayout = new javax.swing.GroupLayout(progressBoardViewer);
        progressBoardViewer.setLayout(progressBoardViewerLayout);
        progressBoardViewerLayout.setHorizontalGroup(
            progressBoardViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 127, Short.MAX_VALUE)
        );
        progressBoardViewerLayout.setVerticalGroup(
            progressBoardViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(progressBoardViewer);

        jLabel1.setText("Cache Treffer:");

        jLabel2.setText("Cache Ausnutzung:");

        cacheUsageLabel.setText("<läuft nicht>");

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, progressPanelLayout.createSequentialGroup()
                        .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cacheUsageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cacheRatioBar, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE))))
                .addContainerGap())
        );

        progressPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cacheUsageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(cacheRatioBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabPane.addTab("Fortschritt", progressPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        JFileChooser fc = new JFileChooser(System.getProperty("user.home"));
        int rc = fc.showDialog(null, "Select Data File");
        if (rc == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            
            try {
                CSVReaderAdapter cra = new CSVReaderAdapter(
                        new FileInputStream(file));
                this.matrixTableModel.setColumnNames(cra.getNames());
                this.matrixTableModel.setValues(cra.getValues());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                    ex.getLocalizedMessage(),
                    "Fehler beim Lesen",
                    JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void solutionListModelIntervalAdded(javax.swing.event.ListDataEvent evt) {//GEN-FIRST:event_solutionListModelIntervalAdded
       solutionList.setSelectedIndex(evt.getIndex0());
       solutionList.ensureIndexIsVisible(evt.getIndex0());
       solutionsPanel.revalidate();
    }//GEN-LAST:event_solutionListModelIntervalAdded

    private void solutionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_solutionListValueChanged
        boardViewer.setBoard((SchmigallaSolver.Board)solutionList.getSelectedValue());
    }//GEN-LAST:event_solutionListValueChanged

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        
        if (solverThread != null) {
            solver.stop();
            try {
                solverThread.join();
            } catch (InterruptedException ex) {
                /* nothing */
            }
            
        }
        
        solver = new SchmigallaSolver(matrixTableModel.getValues());
        solver.addSolverListener(solutionListModel);
        solver.addSolverListener(this);
        
        solutionListModel.clear();
        tabPane.setSelectedComponent(solutionsPanel);
        
        solverThread = new Thread(solver);
        solverThread.start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        matrixTableModel.createNewColumn();
    }//GEN-LAST:event_addButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fc = new JFileChooser(System.getProperty("user.home"));
        int rc = fc.showSaveDialog(GUIMain.this);
        
        if (rc == JFileChooser.APPROVE_OPTION) {
            
            try {
                CsvWriter w = new CsvWriter(
                        this.matrixTableModel.getColumnNames(),
                        this.matrixTableModel.getValues());
                
                w.write(new FileOutputStream(fc.getSelectedFile()));
                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                    ex.getLocalizedMessage(),
                    "Fehler beim Schreiben",
                    JOptionPane.ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_saveButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIMain().setVisible(true);
            }
        });
    }

    public void solutionFound(SchmigallaSolver solver,
          SchmigallaSolver.Board solution) {
        
        /* ignore */
    }

    public void progressMade(SchmigallaSolver solver, final float cacheR,
          final int cacheUsed, final SchmigallaSolver.Board board) {
        
        if ((System.currentTimeMillis() - GUIMain.this.lastStatsUpdate) > 
              1000) {
            
            GUIMain.this.lastStatsUpdate = System.currentTimeMillis();
            
            final SchmigallaSolver.Board copy =
                  (SchmigallaSolver.Board)board.clone();

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {        
                    if (tabPane.getSelectedComponent() == progressPanel) {
                        progressBoardViewer.setBoard(copy);
                        cacheRatioBar.setValue((int)(cacheR * 100));
                        cacheUsageLabel.setText(Integer.toString(cacheUsed));
                    }
                }
            });
        }
    }

    public void solverStopped() {
        /* ignore */
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private de.waldheinz.schmigalla.gui.BoardViewer boardViewer;
    private javax.swing.JProgressBar cacheRatioBar;
    private javax.swing.JLabel cacheUsageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton loadButton;
    private de.waldheinz.schmigalla.gui.MatrixCellRenderer matrixCellRenderer;
    private javax.swing.JPanel matrixPanel;
    private javax.swing.JScrollPane matrixScrollPane;
    private javax.swing.JTable matrixTable;
    private de.waldheinz.schmigalla.gui.MatrixTableModel matrixTableModel;
    private de.waldheinz.schmigalla.gui.BoardViewer progressBoardViewer;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JList solutionList;
    private de.waldheinz.schmigalla.gui.SolutionListModel solutionListModel;
    private javax.swing.JPanel solutionsPanel;
    private javax.swing.JButton startButton;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables
    
}
